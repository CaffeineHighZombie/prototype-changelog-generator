commit 9b9116c79d626b6356f3dfe0d48c9d990ac412a2
Author: Keen Yee Liau <kyliau@umich.edu>
Date:   Fri Dec 20 10:26:24 2019 -0800

    feat(language-service): Append symbol type to hover tooltip (#34515)
    
    Now that https://github.com/angular/angular/pull/34177 fixed the `TypeWrapper`
    to have a proper name, we have the information needed to show the type
    name in a hover tooltip.
    
    PR Close #34515

commit 2dffe65cfdc1329819a5ef0d0f2069efb0b07ff8
Author: Keen Yee Liau <kyliau@google.com>
Date:   Wed Dec 18 11:08:31 2019 -0800

    fix(language-service): completions after "let x of |" in ngFor (#34473)
    
    This commit fixes a bug in which we do testing for completions.
    Subsequently, this exposes another bug in our implementation whereby
    suggestions are not provided in "ngFor" where there should have been.
    
    Currently, multiple test cases are grouped together in a single
    template. This requires the template to be somewhat complete so that
    test cases that depend on variables declared earlier would pass.
    
    Consider the following example:
    
    ```
      template: `
        <div *ngFor="let ~{for-person}person of ~{for-people}people">
          <span>Name: {{~{for-interp-person}person.~{for-interp-name}name}}</span>
          <span>Age: {{person.~{for-interp-age}age}}</span>
        </div>`,
    ```
    
    In order to test `~{for-interp-person}`, `people` has to be included after
    `~{for-people}`. This means the test case for `~{for-people}` is not
    reflective of the actual use case because the variable is already there!
    In real case, the expression would be incomplete, and our implementation
    failed to take that into account.
    
    This commit breaks such test into individual tests, and fix the bugs in
    the underlying implementation.
    
    PR Close #34473

commit 260a061f9f3e85b567a722cfa2b5aa8a84cfce2a
Author: Kara Erickson <karakara@google.com>
Date:   Wed Dec 18 15:53:15 2019 -0800

    chore: release notes for the v9.0.0-rc.7 release

commit cf37c003ffc4e1307a174d6f58e5ed435db68e7e
Author: crisbeto <crisbeto@abv.bg>
Date:   Tue Nov 26 19:33:26 2019 +0100

    feat(ivy): error in ivy when inheriting a ctor from an undecorated base (#34460)
    
    Angular View Engine uses global knowledge to compile the following code:
    
    ```typescript
    export class Base {
      constructor(private vcr: ViewContainerRef) {}
    }
    
    @Directive({...})
    export class Dir extends Base {
      // constructor inherited from base
    }
    ```
    
    Here, `Dir` extends `Base` and inherits its constructor. To create a `Dir`
    the arguments to this inherited constructor must be obtained via dependency
    injection. View Engine is able to generate a correct factory for `Dir` to do
    this because via metadata it knows the arguments of `Base`'s constructor,
    even if `Base` is declared in a different library.
    
    In Ivy, DI is entirely a runtime concept. Currently `Dir` is compiled with
    an ngDirectiveDef field that delegates its factory to `getInheritedFactory`.
    This looks for some kind of factory function on `Base`, which comes up
    empty. This case looks identical to an inheritance chain with no
    constructors, which works today in Ivy.
    
    Both of these cases will now become an error in this commit. If a decorated
    class inherits from an undecorated base class, a diagnostic is produced
    informing the user of the need to either explicitly declare a constructor or
    to decorate the base class.
    
    PR Close #34460

commit dcc8ff4ce7444c29892f6cd82f60fbf88bebcf95
Author: crisbeto <crisbeto@abv.bg>
Date:   Wed Dec 11 17:59:05 2019 +0100

    feat(ivy): throw compilation error when providing undecorated classes (#34460)
    
    Adds a compilation error if the consumer tries to pass in an undecorated class into the `providers` of an `NgModule`, or the `providers`/`viewProviders` arrays of a `Directive`/`Component`.
    
    PR Close #34460

commit 6057c7a373016d42f80218bdc45602ea6108c73c
Author: Alex Rickabaugh <alx+alxhub@alxandria.net>
Date:   Tue Dec 17 12:39:57 2019 -0800

    refactor(ivy): force NG-space error codes for template errors (#34460)
    
    The function `makeTemplateDiagnostic` was accepting an error code of type
    `number`, making it easy to accidentally pass an `ErrorCode` directly and
    not convert it to an Angular diagnostic code first.
    
    This commit refactors `makeTemplateDiagnostic` to accept `ErrorCode` up
    front, and convert it internally. This is less error-prone.
    
    PR Close #34460

commit 498a2ffba37b97247ecb996ded2f431b0f444725
Author: Alex Rickabaugh <alx+alxhub@alxandria.net>
Date:   Tue Dec 17 11:53:55 2019 -0800

    fix(ivy): don't produce template diagnostics when scope is invalid (#34460)
    
    Previously, ngtsc would perform scope analysis (which directives/pipes are
    available inside a component's template) and template type-checking of that
    template as separate steps. If a component's scope was somehow invalid (e.g.
    its NgModule imported something which wasn't another NgModule), the
    component was treated as not having a scope. This meant that during template
    type-checking, errors would be produced for any invalid expressions/usage of
    other components that should have been in the scope.
    
    This commit changes ngtsc to skip template type-checking of a component if
    its scope is erroneous (as opposed to not present in the first place). Thus,
    users aren't overwhelmed with diagnostic errors for the template and are
    only informed of the root cause of the problem: an invalid NgModule scope.
    
    Fixes #33849
    
    PR Close #34460

commit 047488c5d86b39b87d3d7497c5ff720d2adf81c3
Author: Alex Rickabaugh <alx+alxhub@alxandria.net>
Date:   Tue Dec 17 13:29:15 2019 -0800

    refactor(ivy): move NgModule declaration checks to the 'scope' package (#34460)
    
    Previously each NgModule trait checked its own scope for valid declarations
    during 'resolve'. This worked, but caused the LocalModuleScopeRegistry to
    declare that NgModule scopes were valid even if they contained invalid
    declarations.
    
    This commit moves the generation of diagnostic errors to the
    LocalModuleScopeRegistry where it belongs. Now the registry can consider an
    NgModule's scope to be invalid if it contains invalid declarations.
    
    PR Close #34460

commit 3959511b80ff8abb55b8c8858a6080472bff1589
Author: JoostK <joost.koehoorn@gmail.com>
Date:   Sun Dec 15 20:53:36 2019 +0100

    fix(ivy): avoid duplicate errors in safe navigations and template guards (#34417)
    
    The template type checker generates TypeScript expressions for any
    expression that occurs in a template, so that TypeScript can check it
    and produce errors. Some expressions as they occur in a template may be
    translated into TypeScript code multiple times, for instance a binding
    to a directive input that has a template guard.
    
    One example would be the `NgIf` directive, which has a template guard to
    narrow the type in the template as appropriate. Given the following
    template:
    
    ```typescript
    @Component({
      template: '<div *ngIf="person">{{ person.name }}</div>'
    })
    class AppComponent {
      person?: { name: string };
    }
    ```
    
    A type check block (TCB) with roughly the following structure is
    created:
    
    ```typescript
    function tcb(ctx: AppComponent) {
      const t1 = NgIf.ngTypeCtor({ ngIf: ctx.person });
      if (ctx.person) {
        "" + ctx.person.name;
      }
    }
    ```
    
    Notice how the `*ngIf="person"` binding is present twice: once in the
    type constructor call and once in the `if` guard. As such, TypeScript
    will check both instances and would produce duplicate errors, if any
    were found.
    
    Another instance is when the safe navigation operator is used, where an
    expression such as `person?.name` is emitted into the TCB as
    `person != null ? person!.name : undefined`. As can be seen, the
    left-hand side expression `person` occurs twice in the TCB.
    
    This commit adds the ability to insert markers into the TCB that
    indicate that any errors within the expression should be ignored. This
    is similar to `@ts-ignore`, however it can be applied more granularly.
    
    PR Close #34417

commit 024e3b30ac4d87bb2350c9502d07ac5a6278fcc9
Author: JoostK <joost.koehoorn@gmail.com>
Date:   Sun Dec 15 15:12:14 2019 +0100

    refactor(ivy): cleanup translation of source spans in type checker (#34417)
    
    This commit cleans up the template type checker regarding how
    diagnostics are produced.
    
    PR Close #34417
